#!/usr/bin/python

import sys, math, random
import driver_1, factor

#http://codereview.stackexchange.com/questions/43210/tonelli-shanks-algorithm-implementation-of-prime-modular-square-root
#https://en.wikipedia.org/wiki/Legendre_symbol
#http://www.cs.virginia.edu/crab/QFS_Simple.pdf
#http://math.mit.edu/~goemans/18310S15/factoring-notes.pdf
 #http://www.math.colostate.edu/~hulpke/lectures/m400c/quadsievex.pdf

def legendre(a, p):
	f = driver_1.lr(a, (p - 1)/2, p)
	if f != 0 and f != 1:
		return -1
	return f

def g(x, n):
	return driver_1.lr(x, 2, n)

#https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm
def tonelli(p, n):
	if p % 4 == 3:
		x = lr(n, (p + 1) / 4, p)
		return [x, p - x]
	q = p - 1
	s = 0
	while p1 & 1 == 0: #even
		q = q >> 1
		s += 1
	z = 1
	while legendere(z, p) != -1:
		z += 1
	c = pow(z, q, p)

	r, t, m = pow(n, (q + 1)/2, p), pow(n, q, p), s

	while 1:
		if t == r:
			return [r, p - r]
		i = 1
		while i < m:
			if pow(t, pow(2, i), p) == 1:
				b = pow(c, 2*(m - i - 1), p)
				r = r * b % p
				t = t * b ** 2 % p
				c = lr(b, 2, p)
				m = i
				break
			i += 1

def crap_prime(a):
	for i in range(2, a-1):
		if a % i == 0:
			return False
	return True

def small_factor(a):
	for i in range(2, (long)(math.ceil(pow(a, .5))) + 1):
		if a % i == 0:
			return i

def smooth(a, b):
	if driver_1.prime(a) == 0: #crap_prime(a) == True: #
		if a > b:
			return False
		else:
			return True
	while driver_1.prime(a) == 1 and a > 3: #while crap_prime(a) == False: #
		f = factor.factor(a)
		while f == 0 or f == 1:
			f = factor.factor(a)
		if driver_1.prime(f) == 0: #crap_prime(f) == True:#
			if f > b:
				return False
		while a % f == 0 and f != 1:
			a /= f
	if a > b:
			return False
	return True

n = (long)(sys.argv[1])
b = (long)(math.ceil(math.exp(.5 * math.sqrt(math.log(n, 2)*math.log(math.log(n, 2), 2)))))
index = (long)(math.ceil(math.sqrt(n)))

print n, b, index
#print smooth(589425764777413, 5)
#print smooth(75, 5)
#print smooth(14, 5)

fact = []
count = 0
while count < b + 1:
	temp = g(index, n)
	if smooth(temp, b) == 1: #check if temp is b smooth
		fact.append(temp)
		print temp
		count += 1
	index += 1

print fact


